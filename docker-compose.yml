version: '3.8'

# Define a custom network for all services
networks:
  airflow-kafka:
    driver: bridge

x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: Dockerfile.airflow
  environment:
    &airflow-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    AIRFLOW__WEBSERVER__DEFAULT_USER: airflow
    AIRFLOW__WEBSERVER__DEFAULT_PASSWORD: airflow
    # Add Kafka broker configuration
    KAFKA_BROKER: kafka:29092
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./:/opt/airflow
  
    
  # Add all services to the same network
  networks:
    - airflow-kafka

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - airflow-kafka

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"  # Add internal listener port
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Configure multiple listeners
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - airflow-kafka
    healthcheck:  # Add Kafka healthcheck
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:29092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 20

  airflow-postgres:
    image: postgres:13
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - airflow-kafka

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    command: >
      bash -c "
      echo 'Waiting for PostgreSQL to be ready...';
      until PGPASSWORD=airflow psql -h airflow-postgres -U airflow -d airflow -c 'select 1' >/dev/null 2>&1; do
        echo 'PostgreSQL not ready, retrying in 1 second...';
        sleep 1;
      done;
      echo 'PostgreSQL ready!';
      echo 'Initializing Airflow database...';
      airflow db init || { echo 'Database init failed!'; exit 1; };
      echo 'Creating admin user...';
      airflow users create \\
        --username airflow \\
        --password airflow \\
        --firstname Admin \\
        --lastname User \\
        --role Admin \\
        --email admin@example.com || { echo 'User creation failed!'; exit 1; };
      echo 'Initialization complete!';
      "
    depends_on:
      airflow-postgres:
        condition: service_healthy

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    ports:
      - "8080:8080"
    command: webserver
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      kafka:  # Add Kafka dependency
        condition: service_healthy

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      kafka:  # Add Kafka dependency
        condition: service_healthy

volumes:
  airflow_postgres_data: